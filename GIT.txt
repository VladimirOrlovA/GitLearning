
﻿--=< GIT GIT GIT >=-- 

Шпаргалка по консольным командам Git => https://github.com/cyberspacedk/Git-commands
Учебник https://git-scm.com/book/ru/v2
---------------------------------------------------------------------------------

Чтобы работать с GIT установить программу

программа на сайте 
git-scm.com

Пример названия Git-2.9.0-64-bit.exe

После установки комп перезагруить, после этого станет доступена работа с Git в CMD
Проверка => git выйдет справка по git

---------------------------------------------------------------------------------

Проверка настроек
git config --list

---------------------------------------------------------------------------------

Решение проблемы с сертификатом SSL
git config --global http.sslVerify false 

---------------------------------------------------------------------------------

ОТМЕНА

Если сделал commit, но забыл что-то добавить или изменить например, есть возможность
записать новый коммит, при этом ошибочный коммит будет затерт и в системе git отображаться
не будет, как если бы его и не было.

git commit -m "мой крайний коммит" // коммит перед которым что-то забыл сделать
--- вспомнили что нужно что-то сделать - отредактировать, удалить, добавить, переместить и т.д.---
--- делаем то что забыли ---
git add . // добавляем все изменения в индекс или к напримеру только один файл git add forgottenfile.name
git commit --amend -m "мой новый коммит"

В итоге получится единый коммит — второй коммит заменит результаты первого.

Исключить файл из индекса после git add .
git reset <file> или git restore --staged <file>		

Отмена изменений в файле до сотстояния крайнего коммита 2 действия:
git reset <file>  или или git restore --staged <file> // исключить файл из индекса (git add . )
git restore <file> // вернет состояние файла при крайнем коммите.

---------------------------------------------------------------------------------

ОТЧЕТ

посмотреть что сделано в коммитах
git log  // выведет всю инф через встроенный редактор, просмотр ниже того что не вошло 
в выведенную страницу - стрелка вни, выход из редактора q

git log --stat 
git log --patch  или git log -p  // показывает разницу ( вывод патча ), введенную в каждом коммите

---------------------------------------------------------------------------------

Просмотр удалённых репозиториев

git repos
git repos -v  //чтобы просмотреть адреса для чтения и записи, привязанные к репозиторию

git remote show origin // если хотите получить побольше информации об одном из удалённых репозиториев

---------------------------------------------------------------------------------

Добавление удалённых репозиториев
git remote add <shortname> <url>

---------------------------------------------------------------------------------

Удаление и переименование удалённых репозиториев
git remote rename <remoteReposOldName> <remoteReposNewName> // переименование
git remote rm <remoteReposName>

---------------------------------------------------------------------------------

ВЕТКИ

git branch testing // создание нвой ветки testing

//HEAD - указатель на текущую ветку
git log --oneline --decorate // посмотреть на какой коммит указывают ветки

git checkout testing // переключение на ветку (В результате указатель HEAD переместится на ветку testing)

git log // показывает историю коммитов на текущей ветке
git log --all // показывает историю коммитов по всем веткам

HEAD -> master // указатель HEAD указывает на какой мы сейчас ветке

// При переключении с ветки на ветку, файлы в рабочей директории тоже меняются, на то 
состояние, в котором они сохранены на текущей ветке куда сделано переключение

//Для отображения истории коммитов, текущего положения указателей веток и 
истории ветвления выполните команду:
git log --oneline --decorate --graph --all

git checkout -b <newbranchname> // создание ветки и одновременное переключение на нее

---------------------------------------------------------------------------------

Слияние веток - Merge Branches

Поработали над исправлениями в ветке hotfix, протестировали, теперь слияние hotfix с master

git checkout master // переходим на ветку куда сливаем
git merge hotfix // слияние ветки hotfix с текущей веткой на которой находимся, в данном случае master

---------------------------------------------------------------------------------

Получение изменений из удалённого репозитория — Fetch и Pull

git fetch [remote-name]  // Данная команда связывается с указанным удалённым проектом 
и забирает все те данные проекта, которых у вас ещё нет.

git fetch origin // извлекает все наработки, отправленные на этот сервер после того, 
как вы его склонировали

git pull  // как правило, извлекает (fetch) данные с сервера, с которого вы изначально 
склонировали, и автоматически пытается слить (merge) их с кодом, над которым вы в 
данный момент работаете.

Отправка изменений в удаленный репозиторий (Push)

git push <remote-name> <branch-name>

Эта команда срабатывает только в случае, если вы клонировали с сервера, на котором у вас
 есть права на запись, и если никто другой с тех пор не выполнял команду push. Если вы и
 кто-то ещё одновременно клонируете, затем он выполняет команду push, а после него выполнить
 команду push попытаетесь вы, то ваш push точно будет отклонён. Вам придётся сначала получить
 изменения и объединить их с вашими и только после этого вам будет позволено выполнить push.

---------------------------------------------------------------------------------

Переименование ветки локально и в репозитории

git branch -m old_branch new_branch – переименовать локальную ветку
git push origin :old_branch – удалить старую ветку
git push --set-upstream origin new_branch – выгрузить новую ветку и «закрепить» ее за локальной веткой

---------------------------------------------------------------------------------


---------------------------------------------------------------------------------

Загрузка локальгого репозитория в удаленный.
1) Если удаленный репозиторий уже создан, то делаем его клон => git clone <URL>
2) Копируем в него свои файлы, например проект
3) Запускаем CMD - устанавливаем путь на локальный репозиторий (папку которую клонировали из уд репозитория)
4) Проверяем что git увидел изменения командой => git status 
5) Добавляем индексы новых файлов в систему git чтобы сделать их коммит => git add .   
   (точка указывает на выбор всех добавленных файлов)
6) Делаем коммит, т.е. говрим что будем коммитеть, но это еще не отправка в удал репозиторий => git commit -m "first commit"
7) Делаем отправку => git remote add origin https://tfs.eub.kz/USDO_Collection/Gateway.Credilogic/_git/Credilogic.Customer

---------------------------------------------------------------------------------


